# Copyright (C) 2008, The Perl Foundation.
# $Id$

=begin overview

This is the grammar for Markdown written as a sequence of Perl 6 rules.

=end overview

=cut

grammar Markdown::Grammar is PCT::Grammar;

token TOP {
    ^ <Block>*
    {*}
}

token Block {
    <.BlankLine>* [
        | <BlockQuote> {*}      #= BlockQuote
        | <HorizontalRule> {*}  #= HorizontalRule
        | <Heading> {*}         #= Heading
        | <OrderedList> {*}     #= OrderedList
        | <BulletList> {*}      #= BulletList
        | <Para> {*}            #= Para
    ]
}

token Para {
    <.NonindentSpace> <Inlines> <.BlankLine>+
    {*}
}

token AtxInline {
    <!Newline> <!_AtxEnd> <Inline> {*}
}

token _AtxEnd {
    <.Sp> '#'* <.Sp> <.Newline>
}

token AtxStart { '######' | '#####' | '####' | '###' | '##' | '#' }

token AtxHeading {
    <AtxStart> <.Sp> <AtxInline>+ <._AtxEnd>
    {*}
}

token SetextHeading {
    | <SetextHeading1> {*}      #= SetextHeading1
    | <SetextHeading2> {*}      #= SetextHeading2
}

token SetextHeading1 {
    <!Endline> <Inline>+ <.Newline> '===' '='* <.Newline>
    {*}
}

token SetextHeading2 {
    <!Endline> <Inline>+ <.Newline> '---' '-'* <.Newline>
    {*}
}

token Heading {
    | <AtxHeading> {*}          #= AtxHeading
    | <SetextHeading> {*}       #= SetextHeading
}

token BlockQuote {
    <BlockQuoteRaw>
    {*}
}

token BlockQuoteRaw {
    [
        <._Chevron> ' '? <Line>
        [ <!_Chevron> <!BlankLine> <Line> ]*
        <.BlankLine>*
    ]+
    {*}
}

token _Chevron { '>' }

token HorizontalRule {
    <.NonindentSpace> [
        | '*' <.Sp> '*' <.Sp> '*' [ <.Sp> '*' ]*
        | '-' <.Sp> '-' <.Sp> '-' [ <.Sp> '-' ]*
        | '_' <.Sp> '_' <.Sp> '_' [ <.Sp> '_' ]*
    ]
    <.Sp> <.Newline> <.BlankLine>+
    {*}
}

token Bullet {
    <.NonindentSpace> [ '+' | '*' | '-' ] <.Spacechar>+
}

token BulletList {
    | <BulletListTight> {*}     #= BulletListTight
    | <BulletListLoose> {*}     #= BulletListLoose
}

token BulletListTight {
    <BulletListItem>+ <.BlankLine>* <!BulletListLoose>
    {*}
}

token BulletListLoose {
    [
        <BulletListItem> <.BlankLine>*
    ]+
    {*}
}

token BulletListItem {
    <!HorizontalRule> <?Bullet> <ListItem>
    {*}
}

token ListItem {
    [ <.Bullet> | <.Enumerator> ] <ListBlock> <ListContinuationBlock>*
    {*}
}

token ListBlock {
    <Line> <ListBlockLine>*
    {*}
}

token ListContinuationBlock {
    <BlankLine>* [ <.Indent> <ListBlock> ]+
    {*}
}

token Enumerator {
    <.NonindentSpace> \d+ '.' <.Spacechar>+
}

token OrderedList {
    | <OrderedListTight> {*}    #= OrderedListTight
    | <OrderedListLoose> {*}    #= OrderedListLoose
}

token OrderedListTight {
    <OrderedListItem>+ <.BlankLine>* <!OrderedListLoose>
    {*}
}

token OrderedListLoose {
    [
        <OrderedListItem> <.BlankLine>*
    ]+
    {*}
}

token OrderedListItem {
    <!HorizontalRule> <?Enumerator> <ListItem>
    {*}
}

token ListBlockLine {
    <!_ListItem> <!BlankLine> <OptionallyIndentedLine>
}

token _ListItem {
    <.Indent>? [ <BulletListItem> | <OrderedListItem> ]
}

token Inlines {
    [
    | <!Endline> <Inline>
    | <.Endline> <Inline>
    ]+
    <.Endline>?
}

token Inline {
    | <Str> {*}                 #= Str
    | <Endline> {*}             #= Endline
    | <Space> {*}               #= Space
    | <Strong> {*}              #= Strong
    | <Emph> {*}                #= Emph
}

token Space {
    <Spacechar>+ {*}
}

token Str {
    <NormalChar>+ {*}
}

token Endline { TerminalLine | NormalEndline }

token NormalEndline {
    <Sp> <Newline> <!BlankLine> <!AtxStart>
}

token TerminalEndline { <Sp> <Newline> <Eof> }

# This keeps the parser from getting bogged down on long strings of '*' or '_',
# or strings of '*' or '_' with space on each side:
token StarLine {
    | '****' '*'*
    | <.Spacechar> '*'+ <?Spacechar>
}

token UILine {
    | '____' '_'*
    | <.Spacechar> '_'+ <?Spacechar>
}

token Emph {
    | <EmphStar> {*}            #= EmphStar
    | <EmphUI> {*}              #= EmphUI
}

token OneStarOpen { <!StarLine> '*' <!Spacechar> <!Newline> }

token OneStarClose { <!Spacechar> <!Newline> <Inline> <!StrongStar> '*' }

token EmphStar {
    <.OneStarOpen> [ <!OneStarClose> <Inline> ]* <OneStarClose>
    {*}
}

token OneUIOpen { <!UILine> '_' <!Spacechar> <!Newline> }

token OneUIClose { <!Spacechar> <!Newline> <Inline> <!StrongUI> '_' <!Alphanumeric> }

token EmphUI {
    <.OneUIOpen> [ <!OneUIClose> <Inline> ]* <OneUIClose>
    {*}
}

token Strong {
    | <StrongStar> {*}          #= StrongStar
    | <StrongUI> {*}            #= StrongUI
}

token TwoStarOpen { <!StarLine> '**' <!Spacechar> <!Newline> }

token TwoStarClose { <!Spacechar> <!Newline> <Inline> '**' }

token StrongStar {
    <.TwoStarOpen> [ <!TwoStarClose> <Inline> ]* <TwoStarClose>
    {*}
}

token TwoUIOpen { <!UILine> '__' <!Spacechar> <!Newline> }

token TwoUIClose { <!Spacechar> <!Newline> <Inline> '__' <!Alphanumeric> }

token StrongUI {
    <.TwoUIOpen> [ <!TwoUIClose> <Inline> ]* <TwoUIClose>
    {*}
}

rule BlankLine { \n }

token Eof { $ }

token Spacechar { ' ' | \t }

token NonspaceChar { <!SpaceChar> <!Newline> . }

token Newline { \n }

token Sp { <Spacechar>* }

token ws { <Sp> }

token SpecialChar { '*' | '_' | '`' | '&' | '[' | ']' | '<' | '!' | '\\' }

token NormalChar { <!SpecialChar> <!Spacechar> <!Newline> . }

token Alphanumeric { \w }

token NonindentSpace { '   ' | '  ' | ' ' | '' }

token Indent { \t | '    ' }

token IndentedLine { <.Indent> <Line> }

token OptionallyIndentedLine { <.Indent>? <Line> }

token Line { <RawLine> {*} }

token RawLine {
    [
    | (\N*) <.Newline>
    | (.+) <.Eof>
    ]
    {*}
}
